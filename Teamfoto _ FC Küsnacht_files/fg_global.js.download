// The file for adding any global js functions
FgLocaleSettings = {
    formatDate: function(value, formatType, currentFormat) {
       try {
            //Format using moment.js
            var momentObj = moment(value, currentFormat);
            if(momentObj.isValid()){
                 switch(formatType){
                    case 'date':
                        requiredFormat = FgLocaleSettingsData.momentDateFormat;
                        break;
                    case 'datetime':
                        requiredFormat = FgLocaleSettingsData.momentDateTimeFormat;
                        break;
                    case 'time':
                        requiredFormat = FgLocaleSettingsData.momentTimeFormat;
                        break;
                    default:
                        requiredFormat = 'DD.MM.YYYY';
                        break;
                }

                return momentObj.format(requiredFormat);
            } else {
                console.log('Error: Invalid Format');
                return value;
            }
        }
        catch(err) {
            console.log('Exception: Invalid Format');
            console.log(err);
            return value;
        }
    },
};
// Class for handling club settings like currency and its manipulating functions
FgClubSettings = {
    currency : FgLocaleSettingsData.currency,
    currencyPosition : FgLocaleSettingsData.currencyPosition,
    // Function to get amount with currency #}
    getAmountWithCurrency : function(amount,noParse,currency){
        if(!noParse){
            amount = parseFloat(amount);
            amount = amount.toFixed(2);
        }
        if(typeof currency == 'undefined' || currency == ''){
            currency = this.currency;
        }
        
        decimalMark=$("<p/>").html(FgLocaleSettingsData.decimalMark).text();
        thousendSeperator=$("<p/>").html(FgLocaleSettingsData.thousendSeperator).text();
        amount=accounting.formatMoney(amount, "", 2, thousendSeperator, decimalMark);
        var currencyAmount = '';
        if (this.currencyPosition == 'right'){
            currencyAmount = amount + ' ' + currency;
        } else {
            currencyAmount = currency + ' ' + amount ;
        }
        return  currencyAmount;
    },
    // Function to get amount without currency #}
    getAmountWithoutCurrency : function(amount,noParse){
        if(!noParse){
            amount = parseFloat(amount);
            amount = amount.toFixed(2);
        }
        decimalMark=$("<p/>").html(FgLocaleSettingsData.decimalMark).text();
        thousendSeperator=$("<p/>").html(FgLocaleSettingsData.thousendSeperator).text();
        amount=accounting.formatMoney(amount, "", 2, thousendSeperator, decimalMark);
        
        return  amount;
    },
    /**
     * Function to format number with decimal marker and thousend seperator
     * @param int/float/string numb
     * @param bool noParse
     * @param int decimalPoints decimal digit number
     * @returns string
     */
    formatNumber:function(numb,noParse,decimalPoints,showZerodecimalPoint){
        if(typeof(showZerodecimalPoint)=='undefined'){
            showZerodecimalPoint = false;
        }
        if(typeof(decimalPoints)=='undefined'){
            decimalPoints = 2;
        }
        decimalMark=$("<p/>").html(FgLocaleSettingsData.decimalMark).text();
        thousendSeperator=$("<p/>").html(FgLocaleSettingsData.thousendSeperator).text();
        if(numb=='-' || numb==''){
        return numb;
        }
        if(!noParse){
            numb = parseFloat(numb);
            numb = numb.toFixed(decimalPoints);
        }
        if(numb % 1 == 0 && !showZerodecimalPoint){
            return accounting.formatMoney(numb, "", 0, thousendSeperator, '');
        } else {
            return numb=accounting.formatMoney(numb, "", decimalPoints, thousendSeperator, decimalMark);
        }
    },
    /**
     * Function to format number with decimal marker
     * @param int/float/string numb
     * @param bool noParse
     * @returns string
     */
    formatDecimalMark:function(numb,noParse){
        decimalMark=$("<p/>").html(FgLocaleSettingsData.decimalMark).text();
        if(!noParse){
            numb = parseFloat(numb);
            numb = numb.toFixed(2);
        }
        if(numb % 1 != 0){
            numb=accounting.formatMoney(numb, "", 2, '', decimalMark);
        }
        return numb;
    },
    /**
     * Function to unformat number with decimal point
     * @param {type} numb
     * @returns {unresolved}
     */
    unFormatNumber:function(numb){
        decimalMark=$("<p/>").html(FgLocaleSettingsData.decimalMark).text();
        numb=numb.replace(decimalMark,'.');

        return numb;
    },
    /**
     * To format a number to 3 decimals, function will return two decimals when input has two decimals or less. #FAIRDEV-2007
     * @param int num
     * @returns float
     */
    formatThreeDecimal: function (num, format) {
        if (!num || num === '') {
            return num;
        }
        num = (typeof num === 'string') ? parseFloat(num) : num;
        // If number has 2 decimal points
        if (((num * 1000) % 10) == 0) {
            return format === true ? FgClubSettings.formatNumber(num.toFixed(2), false, 2, true) : num.toFixed(2);
        } else {
            return format === true ? FgClubSettings.formatNumber(num, false, 3, true) : num;
        }
    }
}
//Handling Google maps in  both calendar and cms 
FgMapSettings = {
    mapShow : function(lat, lng, mapDisplay, mapZoomValue,showMarker, mapId, loc){
        // map is drawn based on the parameters passed
        
        if(mapDisplay =='ROADMAP' || mapDisplay=='TERRAIN'){
           mapDisplay = 'roadmap'; 
        } else {
           mapDisplay = 'satellite'; 
        }
        var height = $("#"+mapId).height();
        var iframeHeight = '';
        var marker = '&';
        var mode='place';
        var center ="";
        if(height !='' && height!=0) {
          iframeHeight =  height+'px'; 
        }
         if(showMarker == 1 || showMarker == 'true' )
        {
          marker = "q="+lat+","+lng+"&";
       
        } else {
          mode ='view';
          center = "&center="+lat+","+lng;
        }
        var iFrameAttribute="<iframe width='100%'  frameborder='0'   height ='"+iframeHeight+"' style='border:0' src='https://www.google.com/maps/embed/v1/"+mode+"?"+marker+"key="+googleEmbeddedMapApiKey+"&maptype="+mapDisplay+center+"&zoom="+mapZoomValue+"'></iframe>";
         
         $("#"+mapId).html('');
         $("#"+mapId).html(iFrameAttribute);
    },
    mapResize : function(lat, lng, loc){
        var myCenter=new google.maps.LatLng(lat,lng);
        var mapProp = {
            center:myCenter,
            zoom:15,
            mapTypeId:google.maps.MapTypeId.ROADMAP
        };
        var center = map.getCenter();
            google.maps.event.trigger(map, "resize");
            map.setCenter(center);
    },
    mapInfoWindowResize:function(){
        if($(window).width() < 500){
            $('.fg-map-info').parents().eq(3).addClass('fg-map-info-parent');
        }else{
            $('.fg-map-info').parents().eq(3).removeClass('fg-map-info-parent');

        }

    },
    mapAutoComplete : function(){
        var input =(document.getElementById('locAutoComp'));
        var autocomplete = new google.maps.places.Autocomplete(input);
        
        // prevent enter key event
        google.maps.event.addDomListener(input, 'keydown', function(event) { 
           if (event.keyCode === 13) { 
               event.preventDefault(); 
           }
        }); 
        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if ($('#mapLocality').length) {
                var locality = '';
                $.each(place.address_components, function (index,value) {
                    if (_.contains(value['types'], 'locality')) {
                        locality = value['long_name'];
                         return false;
                    }
                })
                $('#mapLocality').val(locality);
            }
            if (place.geometry) {
                $('#mapLat').val(place.geometry.location.lat());
                $('#mapLng').val(place.geometry.location.lng());
            } else {
                $('#locAutoComp').val();
            }
            //save buttons disabled after changing location #System+testing-54
            $('input#locAutoComp').change();
        });
    }
}

FgGlobalSettings = {
    // Handles date-time picker
    handleDateTimepicker: function(extraSettings) {
        var defaultSettings = {
            language: jstranslations.localeName,
            format: FgLocaleSettingsData.jqueryDateTimeFormat,
            autoclose: true,
            weekStart: 1
        };
        var dateSettings = $.extend(true, {}, defaultSettings, extraSettings);
        $('.datetimepicker').datetimepicker(dateSettings);
        $('body').on('click', '.fg-datetimepicker-icon', function() {
            $(this).siblings('.datetimepicker').datetimepicker('show');
        });
    },

    //Lang Switch
    handleLangSwitch: function(){
        $(document).off('click', 'button[data-elem-function=switch_lang]');
            /* function to show data in different languages on switching language */
        $(document).on('click', 'button[data-elem-function=switch_lang]', function () {
            selectedLang = $(this).attr('data-selected-lang');
            $('.btlang').removeClass('active');
            $(this).addClass('active');
            FgUtility.showTranslation(selectedLang);
        });
    },
    characterCount : function(obj,maxLength,targetcounter){

            var textLength1 =  obj.val().length;
            var remain = parseInt(maxLength - textLength1 );
            targetcounter.html(remain+' ' +jstranslations.chars);
        $(document).on('keydown keyup paste  propertychange DOMAttrModified ', obj, function (e) {
         obj.attr('maxlength',maxLength);
            var textLength =  obj.val().length;
        if (textLength >= maxLength+1) {
               obj.val(obj.val().substring(0, maxLength));
           }
        var textLength1 =  obj.val().length;
        var remain = parseInt(maxLength - textLength1 );
        targetcounter.html(remain+' ' +jstranslations.chars);

      });

    },
    // function to appended https:// in the url field ( use class "fg-urlmask")
    handleInputmask: function () {
        $(".numbermask").inputmask("decimal", {
            rightAlign: false,
            placeholder: "",
            digits: 2,
            radixPoint: FgLocaleSettingsData.decimalMark,
            autoGroup: true,
            allowPlus: false,
            allowMinus: false,
            clearMaskOnLostFocus: true,
            removeMaskOnSubmit: true,
            onUnMask: function (maskedValue, unmaskedValue) {
                var x = unmaskedValue.split(',');
                if (x.length != 2)
                    return "0.00";
                return x[0].replace(/\./g, '') + '.' + x[1];
            }
        });
        $(document).on('blur', ".fg-urlmask", function () {
            appendHttp(this);
        });
        $(document).on('keypress', ".fg-urlmask", function (e) {
            if (e.which == 13) {
                appendHttp(this);
            }
        });
        appendHttp = function (_this) {
            inputVal = $(_this).val();
            if (inputVal != "") {
                var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
                if (!regexp.test(inputVal)) {
                    var indx = inputVal.indexOf("://");
                    if (indx < 0) {
                        returnUrl = "http://" + inputVal.substring(indx);
                    }
                    else {
                        returnUrl = "http" + inputVal.substring(indx);
                    }
                    $(_this).val(returnUrl);
                }
            }
        };
    },
    escapeSpecialChar: function (inputText) {
        return _.escape(inputText);
    },
    removeNonGSMChars: function (str) {
        var purifiedString = '';
        for (var x = 0; x < (str.length); x++) {
            if(/[A-Za-z0-9 \r\n@£$¥èéùìòÇØøÅå\x{0394}_\x{03A6}\x{0393}\x{039B}\x{03A9}\x{03A0}\x{03A8}\x{03A3}\x{0398}\x{039E}ÆæßÉ!\"#$%&\'\(\)*+,\-.\/:;<=>;?¡ÄÖÑÜ§¿äöñüà^{}\[\~\]\|\x{20AC}\\]/mg.test(str.charAt(x)) === true) {
                purifiedString += str.charAt(x);
            }
        }
        return purifiedString;
    },

    //Global function for Copy text to clipboard on Clik
    fgCopyToClipboard : function(targetElement, showSucessIcon = true) {
        
        
        $("body").on("click", targetElement, function () {

            let $this = $(this);

            // Get the Target URL for Copying with data attr
            let targetText = $this.attr("data-clipboard-text");
            let orginalTitle = $this.attr("data-original-title");
            
            let succeeded;
            
            if (targetText === undefined || targetText == "" ){
                console.log("Please add data-clipboard-text");
                return;
            }
            
            // Create a temp Element for Copy target URL
            let $tempFakeElement = $("<textarea>");

            // Add style to hide Temp Element from DOM
            $tempFakeElement.css({
                'border' : '0',
                'padding' : '0',
                'margin' : '0',
                'position' : 'absolute',
                'left':'-9999px',
                'top' : 0
            });
            
            //set the Temp Element to Readonly
            $tempFakeElement.attr('readonly', '');
            
            $tempFakeElement.val(targetText);

            $("body").append($tempFakeElement);
            
            // Select the Text from the input & Copy to text to clipboard
            $tempFakeElement.select();

            
            try {
                //execute Copy Command to Copy the selected text from temp textarea
                succeeded = document.execCommand("copy");
            }
            catch (err) {
                succeeded = false;
            }

            $tempFakeElement.remove();

            //if 
            if(succeeded && showSucessIcon){
                $this.toggleClass("fa-clipboard fa-check").addClass('text-green').attr('data-original-title', 'Copied');

                
                setTimeout(function(){ 
                    $this.toggleClass("fa-clipboard fa-check").removeClass('text-green').attr('data-original-title', orginalTitle)
                }, 3000);


            }else{
                console.log("Text Not copied");
            }

            
        });
    }
}
//Handling Iframe in cms(website and page-content edit page) 
//To make facebook like-box to adaptive width #FAIR-2700
FgIframeSettings = {
    loadIframe :function(el) {
        if($(el).attr('data-load') !== '1'){
            var width = parseInt($(el).parent('.fg-iframe-parent').outerWidth());
            var url = $(el).attr('data-url');
            var newUrl = url;
            if (/^(https?:\/\/)?((w{3}\.)?)facebook.com.*/i.test(url)) {
                url = url.replace('width=', '');
                newUrl = url + (url.indexOf('?') !== -1 ? "&width="+width : "?width="+width);
            }
            $(el).attr('src', newUrl);
            $(el).attr('data-load', '1');
        }
    }
};

FgPdf = {
    render: function(url, canvasContainer, options){
        var options = options || { scale: 1.35 };
        
        function renderPage(page) {
            var viewport = page.getViewport(options.scale);
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            var renderContext = {canvasContext: ctx,viewport: viewport};

            canvas.height = Math.ceil(viewport.height);
            canvas.width = Math.ceil(viewport.width);
            canvas.style.marginBottom = "5px";

            canvasContainer.appendChild(canvas);
            page.render(renderContext);
        }

        function renderPages(pdfDoc) {
            for(var num = 1; num <= pdfDoc.numPages; num++)
                pdfDoc.getPage(num).then(renderPage);
        }

        PDFJS.disableWorker = true;
        PDFJS.getDocument(url).then(renderPages);
    }
}

FgCustomValidator = {
    email :function(value) {
        return /[^\x00-\x7f]/.test(value.split('@')[0]) || !/^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i.test(value);
    }
}

FgDocumentSettings = {
 
    // funtion to format uploaded file size
    formatFileSize: function(bytes){

        if (typeof bytes !== 'number') {
            return '';
        }

        if (bytes >= 1073741824) {
            return FgClubSettings.formatNumber((bytes / 1073741824).toFixed(2)) + ' GB';
        }

        if (bytes >= 1048576) {
            return FgClubSettings.formatNumber((bytes / 1048576).toFixed(2)) + ' MB';
        }

        return FgClubSettings.formatNumber((bytes / 1024).toFixed(2)) + ' KB';
    },

    // funtion to Set Icon for uploaded file
    setFileIcon: function(data,tpl){
        let oFReader = new FileReader();
        let support = true;
        if ('FileReader' in window) {
            let ofile = data.files[0];
            let demoURL = oFReader.readAsDataURL(ofile);
        } else {
            support = false;
        }
        let ext = data.files[0].name.split('.').pop().toLowerCase();
        let readerTypes = ['jpg', 'jpeg', 'png', 'gif', 'ico', 'bmp'];
        let filetypes = FgDocumentSettings.getFileTypeArray();
        if (readerTypes.indexOf(ext) > -1 && support) {
            oFReader.onload = function (eventData) {
                dataURI = eventData.target.result;
                tpl.find('div[data-image-area]').html("<img src='" + dataURI + "' />");
            };
        } else if (filetypes.docTypes.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-word'></i>");
        } else if (filetypes.pdfTypes.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-pdf'></i>");
        } else if (filetypes.textTypes.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-text'></i>");
        } else if (filetypes.excelTypes.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-excel'></i>");
        } else if (filetypes.powerType.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-powerpoint'></i>");
        } else if (filetypes.archiveType.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-zip'></i>");
        } else if (filetypes.audioType.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-sound'></i>");
        } else if (filetypes.videoType.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-video'></i>");
        } else if (filetypes.webTypes.indexOf(ext) > -1) {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file-code'></i>");
        } else {
            tpl.find('div[data-image-area]').html("<i class='fa fg-file'></i>");
        }
    },

    // funtion to get uploaded file type
    getFileTypeArray: function() {
        
        let fileTypes = {};
        fileTypes.docTypes = ['doc', 'docx', 'odt'];
        fileTypes.pdfTypes = ['pdf'];
        fileTypes.excelTypes = ['xls', 'xlsx'];
        fileTypes.powerType = ['ppt', 'pptx'];
        fileTypes.archiveType = ['zip', 'rar', 'tar', 'gz', '7z'];
        fileTypes.audioType = ['mp3', 'aac', 'amr', 'm4a', 'm4p', 'wma'];
        fileTypes.videoType = ['mp4', 'flv', 'mkv', 'avi', 'webm', 'vob', 'mov', 'wmv', 'm4v'];
        fileTypes.webTypes = ['html', 'htm'];
        fileTypes.textTypes = ['txt', 'rtf', 'log'];
        fileTypes.imgTypes = ['jpg', 'jpeg', 'png', 'gif', 'ico', 'bmp'];

        return fileTypes;
    },

    // funtion to get Icon for uploaded file in datatable
    getFileIconDatatable : function(fileName){

        var ext = fileName.toString().split('.').pop().toLowerCase();
        var filetypes = FgDocumentSettings.getFileTypeArray();

        if (filetypes.docTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-word fg-datatable-icon'></i>";
        } else if (filetypes.pdfTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-pdf fg-datatable-icon'></i>";
        } else if (filetypes.excelTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-excel fg-datatable-icon'></i>";
        } else if (filetypes.powerType.indexOf(ext) > -1) {
            return "<i class='fa fg-file-powerpoint fg-datatable-icon'></i>";
        } else if (filetypes.archiveType.indexOf(ext) > -1) {
            return "<i class='fa fg-file-zip fg-datatable-icon'></i>";
        } else if (filetypes.audioType.indexOf(ext) > -1) {
            return "<i class='fa fg-file-sound fg-datatable-icon'></i>";
        } else if (filetypes.videoType.indexOf(ext) > -1) {
            return "<i class='fa fg-file-video fg-datatable-icon'></i>";
        } else if (filetypes.webTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-code fg-datatable-icon'></i>";
        } else if (filetypes.textTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-text fg-datatable-icon'></i>";
        } else if (filetypes.imgTypes.indexOf(ext) > -1) {
            return "<i class='fa fg-file-photo fg-datatable-icon'></i>";
        } else {
            return "<i class='fa fg-file fg-datatable-icon'></i>";
        }
    }

}


